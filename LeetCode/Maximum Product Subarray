Complexity
Time complexity: O(n^2)
Space complexity: O(1)
Code
 class Solution {
    public int maxProduct(int[] nums) {
        int maxProduct = Integer.MIN_VALUE;
        for(int i=0;i<nums.length;i++){
            int currProduct=1;
            for(int j=i;j<nums.length;j++){
                currProduct = currProduct * nums[j];
                maxProduct = Math.max(currProduct , maxProduct);
            }
        }
        return maxProduct; 
    }
}
Complexity
Time complexity: O(n)
Space complexity: O(1)
Code
 class Solution {
    public int maxProduct(int[] nums) {
        int leftProduct = 1;
        int rightProduct =1;
        int ans =Integer.MIN_VALUE;
        int n = nums.length;
        for(int i=0;i<nums.length;i++){

            // anytime if any product becomes 0, mark it as 1
            if(leftProduct==0) leftProduct = 1;
            if(rightProduct==0) rightProduct = 1;

            leftProduct *= nums[i];
            rightProduct *= nums[n-i-1];
            ans = Math.max(ans,Math.max(leftProduct, rightProduct));
        }
        return ans;

    }
}

Approach 1
Complexity
Time complexity: O(n)
Space complexity: O(n)

Code
class Solution {
    TreeNode prev = null;
    public void flatten(TreeNode root) {
        if(root==null) return;
        flatten(root.right);
        flatten(root.left);
        root.right = prev;
        root.left = null;
        prev = root;  
    }
}
---------------------------------------------------
Approach 2 (Space Optimized)
Complexity
Time complexity: O(n)
Space complexity: O(1)

Code
class Solution {
    public void flatten(TreeNode root) {
        if(root==null) return;
        TreeNode curr = root;
        while(curr!=null){
            if(curr.left!=null){
                TreeNode prev =curr.left;
                while(prev.right!=null)
                    prev = prev.right;
                prev.right = curr.right;
                curr.right = curr.left;
                curr.left = null;
            }
            curr = curr.right;
        }
    }
}

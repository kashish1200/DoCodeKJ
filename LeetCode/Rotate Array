Complexity
Time complexity: O(n)
Space complexity: O(1)
Code
class Solution {


    public static void reverse(int nums[], int start, int end){
        while(start<end){
            int temp = nums[start];
            nums[start] = nums[end];
            nums[end] = temp;
            start++;
            end--;
        }
    }
    public void rotate(int[] nums, int k) {
        //once k reaches n , its nothing but k = 0, so instead of rotating so many time as k can be big value, we keep it in range 0 to n for ex : say n = 10, and k = 12 , so either u rotate 12 times or 2 times its same thing

        int n = nums.length;
        k= k%n;
        reverse(nums, 0, n-1);
        reverse(nums,0,k-1);
        reverse(nums,k, n-1);  
    }
}

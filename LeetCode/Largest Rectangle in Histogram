class Solution {
    public int largestRectangleArea(int[] heights) {
        //The main Thing in this Q is to find Width for a rectangle
        //Width = nsr[i] - nsl[i] - 1;
        Stack<Integer> s = new Stack<>();
        int n = heights.length;
        int nsr[] = new int[n];
        int nsl[] = new int[n];
        
        //next smaller right Element Indices
        for(int i=n-1;i>=0;i--){
            while(!s.isEmpty() && heights[s.peek()]>= heights[i]){
                s.pop();
            }
            if(s.isEmpty()){
                nsr[i]=n;
            }else{
                nsr[i]=s.peek();
            }
            s.push(i);
        }
        //next smaller left 
        s = new Stack<>();
        for(int i=0;i<n;i++){
            while(!s.isEmpty() && heights[s.peek()]>=heights[i]){
                s.pop();
            }
            if(s.isEmpty()){
                nsl[i]=-1;
            }else{
                nsl[i]=s.peek();
            }
            s.push(i);
        }
        
        int maxArea = 0;
        for(int i=0;i<n;i++){
            int width = nsr[i] - nsl[i] - 1;
            int currArea = heights[i]*width;
            
            maxArea = Math.max(currArea,maxArea);
        }
        
        return maxArea;
    }
}

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.
An input string is valid if:
Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
Every close bracket has a corresponding open bracket of the same type.
Example 1:
Input: s = "()"
Output: true
  
Example 2:
Input: s = "()[]{}"
Output: true
  
Example 3:
Input: s = "(]"
Output: false


  SOLUTION (Arraylist, Not by stack)

  First I use a for loop to iterate to your string and then you check if there are any open brackets and add them to your arraylist.
Whenever you encounter a closing bracket you simply check if the last element of the arraylist is the opening of it if yes then remove it from the arraylist if not then return false .

make sure to add the condition of if(arr.size()>0 in the remove part to resolve the index out of bound error.

Complexity
Time complexity: O(n)
Space complexity: O(n)



class Solution {
    public boolean isValid(String s) {
        ArrayList<Character> arr = new ArrayList<Character>();

    for(int i = 0 ; i < s.length() ;i++){
        if(s.charAt(i) == '(' || s.charAt(i) == '{' || s.charAt(i) == '[' ){
            arr.add(s.charAt(i));
        }
        else if(s.charAt(i) == ')'){
            if(arr.size()>0 && arr.get(arr.size()-1) == '('){
                arr.remove(arr.size()-1);
            }else{
                return false ;
            }
        }else if(s.charAt(i) == '}'){
            if(arr.size()>0 && arr.get(arr.size()-1) == '{'){
                arr.remove(arr.size()-1);
            }else{
                return false ;
            }
        }else if(s.charAt(i) == ']'){
            if(arr.size()>0 && arr.get(arr.size()-1) == '['){
                arr.remove(arr.size()-1);
            }else{
                return false ;
            }
        }


//------------------------------------------------------------------------------//
By using stack 
TC = SC = O(n) 
class Solution {
    public boolean isValid(String s) {
        Stack<Character> stack = new Stack<>();
        for(char i : s.toCharArray())
            if(i=='{' || i=='(' || i=='[' )
                stack.push(i);
            else{
                if(stack.empty() || (i==')' && stack.peek()!='(') || (i=='}' && stack.peek()!='{') || (i==']' && stack.peek()!='[') ) return false;
                stack.pop();
            }
        return stack.empty();
    }
}
    }      
        return (arr.size()==0);
    }
}

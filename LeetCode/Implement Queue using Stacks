Complexity
Time complexity:
Push: O(1)
Pop: O(n)
Peek: O(n)
Empty: O(1)
Space complexity: O(n)

Code
class MyQueue {
    Stack<Integer> s1 = new Stack<>();
    Stack<Integer> s2 = new Stack<>();

    //directly adding element in s1
    public void push(int x) {
        s1.push(x);  
    }
    // first pop it from s1 and push into s2, untill s1 becomes empty 
    // then pop the element from s2 and 
    //again pop from s2 and push in s1 till s2 becomes empty
    public int pop() {
        while(!s1.isEmpty()){
            s2.push(s1.pop());
        }
        int result = s2.pop();
        while(!s2.isEmpty()){
            s1.push(s2.pop());
        }
        return result;  
    }
    
    //doing same thing in peek() as pop() 
    //do not pop element here, just return peek of it
    public int peek() {
        while(!s1.isEmpty()){
            s2.push(s1.pop());
        }
        int result = s2.peek();

        while(!s2.isEmpty()){
            s1.push(s2.pop());
        }
        return result;      
    }
    
    public boolean empty() {
        return s1.isEmpty() ;
        
    }
}

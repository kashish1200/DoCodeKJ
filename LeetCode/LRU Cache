class LRUCache {
    class Node{
        int key;
        int value;
        Node next;
        Node prev;
        Node(int key, int value){
            this.key = key;
            this.value =value;
        }
    }
    HashMap<Integer,Node> map = new HashMap<>();
    Node head;
    Node tail;
    int capacity;

    public LRUCache(int capacity) {
        this.capacity = capacity;
        // a false head and tailwith (0,0) to mark the boundary, so that we don't need to check the NULL node during the update.
        head = new Node(0,0);
        tail = new Node(0,0);
        head.next = tail;
        tail.prev = head;
    }
    
    public int get(int key) {
        Node node = map.get(key);
        if(node==null) return -1;
        //Move certain node in between to the head.
        remove(node);
        insert(node);
        return node.value;
    }
    
    public void put(int key, int value) {
        if(map.containsKey(key)){
            remove(map.get(key));
        }
        if(map.size()==capacity){
            remove(tail.prev);
        }
        insert(new Node(key,value));
    }

    //adding node at left of tail
    private void insert(Node node){
        map.put(node.key,node);
        node.prev = head;
        node.next = head.next;
        head.next.prev = node;
        head.next = node;
    }
    //Remove an existing node from the linked list.
    private void remove(Node node){
        map.remove(node.key);
        node.prev.next = node.next;
        node.next.prev = node.prev;
    }
}

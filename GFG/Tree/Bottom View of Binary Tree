
class Solution
{
    static class Pair{
        Node node;
        int hd;
        Pair(Node node, int hd){
            this.node = node;
            this.hd = hd;
        }
    }
    //Function to return a list containing the bottom view of the given tree.
    public ArrayList <Integer> bottomView(Node root)
    {
        Queue<Pair> que = new LinkedList<>();
        TreeMap<Integer, Node> map = new TreeMap<>();
        int hd =0;
        ArrayList<Integer> ans = new ArrayList<>();
        que.add(new Pair(root, hd));
        while(!que.isEmpty()){
            Pair curr = que.poll();
            map.put(curr.hd, curr.node);
            if(curr.node.left!=null){
                que.add(new Pair(curr.node.left, curr.hd-1));
            }
            if(curr.node.right!=null){
                que.add(new Pair(curr.node.right, curr.hd+1));
            }
        }
        for(Map.Entry<Integer, Node> entry : map.entrySet()){
            ans.add(entry.getValue().data);
        }
        return ans;
        // Code here
    }
}

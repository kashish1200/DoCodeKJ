Brute force - O(n^2)

class Solution {
    // Function to return the position of the first repeating element.
    public static int firstRepeated(int[] arr, int n) {
        for(int i =0;i<n;i++){
            for(int j=i+1;j<n;j++){
                if(arr[i]==arr[j]){
                    return i+1;
                }
            }
        }
        return -1;
    }
}

Optimized - O(n)

class Solution {
    // Function to return the position of the first repeating element.
    public static int firstRepeated(int[] arr, int n) {
        HashMap <Integer,Integer> mp= new HashMap<>();
        for(int i =0;i<n;i++){
            mp.put(arr[i], mp.getOrDefault(arr[i],0)+1);
        }
        for(int i =0;i<n;i++){
            if(mp.get(arr[i])>1){
                return i+1;
            }
        }
        return -1;
    }
}


